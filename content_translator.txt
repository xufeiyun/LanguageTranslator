/**
 * CONTENT SCRIPTS: to operate web-pages-opened-by-user.
 **/
 // Unlike the other chrome.* APIs, parts of chrome.runtime can be used by content scripts

var prefix = "[CONTENT SCRIPTS]: ";

// Error: SecurityError: DOM Exception 18
// when invode webkitNotifications.createNotification in common.js
// from content scripts
var showPopupMsg = logD;
var isTranslatedByInput = false;

function InitializeEvents()
{
	//var txtInputBox = document.getElementById("kw");
	//if (txtInputBox) { txtInputBox.setAttribute("value", "Eric Xu"); txtInputBox.select(); }
	tab2ext(OperatorType.getCopiedText, "");
}
//InitializeEvents();

// Run our scripts as soon as the document's DOM is ready.
addDOMLoadEvent(fnDOMLoadCompleted);
function fnDOMLoadCompleted() 
{
	logD("DOM Loaded Completedly.");
	// add events
	handlePages();
    //setTimeout(handlePages, 1000);
}

var dtStart;
var timeoutId;
var thePopup;
var theEvent;
var MousePosition = {x: null, y: null};

function hidePopupTranslator()
{
    var id = "divLanguageTranslator";
    var text = getSelectedText().toString();
    if (!isValidText(text))
    {
        $("#" + id).hide();
    }
}


// this includes: [select text by moving mouse] and [select text by dbl-clicking the text]
document.onselectionchange = fnSelectionChanged;
function fnSelectionChanged() 
{
    // need save selected text
    // then translate it when expanding or enabling the popup dialog
    //if (OptionItemValues.EnableTranslation)
    {
        var text = getSelectedText().toString();
        if (!isValidText(text))
        {
            return false;
        }
        isTranslatedByInput = false;
        clearTimeout(timeoutId);
        dtStart = new Date();
        theEvent = window.event;
        logD("Selection Changed in DOM: " + dtStart.getTime());

        selectTextByTimeout(text);
        //timeoutId = setTimeout(selectTextByTimeout, AutoCopyTextInterval + 100);
    }
}

$(document).ready(function ()
{
    $(document).mousemove(function (e)
    {
        MousePosition.x = e.pageX;
        MousePosition.y = e.pageY;
    });
    $(document).click(function (e)
    {
        //hidePopupTranslator();
    });
    $(window).scroll(function (e)
    {
        popupPosition();
    });

    // load configs
    loadConfigs();
});

var loadConfigs = function ()
{
    OptionItemValues.EnableTranslation = getItem(OptionItemKeys.EnableTranslation);
    OptionItemValues.EnablePopupDialog = getItem(OptionItemKeys.EnablePopupDialog);
    OptionItemValues.EnableCopyText = getItem(OptionItemKeys.EnableCopyText);
    OptionItemValues.EnableLogger = getItem(OptionItemKeys.EnableLogger);
};

var isCopied = false;
function selectTextByTimeout(text)
{
	clearTimeout(timeoutId);
	var interval = getInterval(dtStart, new Date());
	//if (interval > AutoCopyTextInterval)
	{
		if (isCopied) return;

        var message = getSelectedText().toString();

        // copy the selected text to clipboard
        if (OptionItemValues.EnableCopyText)
        {
            logD("To Copy selected Text: " + message);
            // window.Clipboard.copy(text);
            // send message to background to copy text
            tab2ext(OperatorType.copySelectText, message);
        }

        if (OptionItemValues.EnableTranslation)
        {
            OptionItemValues.EnablePopupDialog = true;
        }

        // enable the webpage-based popup dialog
		if (OptionItemValues.EnablePopupDialog)
		{
		    // start translate and create web page popup element
		    // no need to translate here => translated in iframe popup page
		    //translateByYoudao(text);
		    if (OptionItemValues.EnableTranslation)
		    {
		        showPopupDialogForTranslation(message, 'main meanings', 'more meanings');
		        // send message to background to translate text
		        tab2ext(OperatorType.getSelectText, message);
		    }
		}

        // clear all timeout ids
		while (timeoutId > 0)
		{
			clearTimeout(--timeoutId);
		}
		isCopied = false;
	}
}


/*-----------  Translate By YouDao API --------------*/
function translateByYoudao(message)
{
    if (!isValidText(message)) return false;

	var type = "";
    //initializeTexts(message, type);

    var text = message;
    var url = ProductURIs.YouDaoURL;
    $.ajax({
        url: url,
        dataType: "json",
        type: "get",
        data: "q=" + encodeText(text),
        success: function (result) {
            //showAPILogo("logoYouDao");
            if (result.errorCode == 0) {
                parseResultYoudao(result, message);
            }
            else {
                handleErrorYouDao(result.errorCode, message);
            }

        },
        error: function (e) {
            handleErrorYouDao(10, message);
        }
    });

}
function handleErrorYouDao(errorCode, source)
{
    var text = "Normal";
    switch (errorCode)
    {
        case 10: 
            text = "Unknow error!"
            break;
        case 20: 
            text = "Text is too long!"
            break;
        case 30:
            text = "Can't process invalid translation!"
            break;
        case 40: 
            text = "Unsupported languang type!"
            break;
        case 50:
            text = "Invalid Private API Key!"
            break;
        defaut:
            text = "Undefined ErrorCode: " + errorCode;
    }
    //updateMainMeaning(text);
    //updateMoreMeaning(emptytext);
    showPopupDialogForTranslation(source, text, "");
}
function parseResultYoudao(result, source)
{
	var type = "";
    logD("Received Translated Results!");

    //var data = JSON.parse(result);
    var data = result;
    if (data.errorCode == 0)
    {
        var single = "";
        var multiples = "";
        var sound = "";

        var hasBasic = (data.basic) ? true : false;
        if (hasBasic)
        {
            single = combineValues(data.basic.explains, "." + NewLine);
            if (isDefined(data.basic.phonetic))
            {
                sound = "[" + data.basic.phonetic + "]  " + NewLine;
            }
        }
        else
        {
            single = combineValues(data.translation);
        }

        // add Main pronounce
        //createTranslateAudio(PronounceAudios.Main, single);
        //updateMainMeaning(sound + single);

        var hasWeb = (data.web) ? true : false;
        if (hasWeb)
        {
            var webs = data.web;
            for (var i = 0; i < webs.length; i++) {
                var web = webs[i];
                var key = web.key;
                var value = combineValues(web.value);
                multiples += ((multiples == "") ? "" : NewLine) + key + ": " + value;
            }
        }
        else
        {
            multiples = single;
        }

        // add More pronounce
        //createTranslateAudio(PronounceAudios.More, multiples);        
        //updateMoreMeaning(multiples);
        
        showPopupDialogForTranslation(source, sound + single, multiples);
    }
}
function combineValues(valuesArray, separator)
{
    if (!isValidText(separator)) {separator = ",";}
    var values = "";
    for (var i = 0; i < valuesArray.length; i++) {
        var value = valuesArray[i];
        if (values == "")
        {
            values += value.toString();            
        }
        else
        {   
            values += separator + value.toString();
        }
    }
    return values;
}
/*END*/

var clearTexts = function() {
    $("#txtSelected").html(EmptyText);
    $("#txtTranslated").html(EmptyText);
    $("#txtTranslatedAll").html(EmptyText);
};
var translateByTimeout = function()
{
    clearTimeout(timeoutId);
    var interval = getInterval(dtStart, new Date());
    if (interval > AutoTranslateInterval)
    {
        translateByInput();
    }
}
var translateByInput = function()
{
    logD("Translating by input......");
    var text = $("#txtSelected").val();
    translateByYoudao(text);
}
var updateHeight = function(id)
{
    var attribute = "height";

    $(id).css(attribute, EmptyText);    // restore height

    updateRows(id);

    $(id).css(attribute, $(id)[0].scrollHeight);    // set height
}

var updateRows = function(id)
{
    var rows = $(id).val().split("\n").length;
    var count = $(id).val().length / OneLineCharCount;
    if (rows < 2)
    {
        rows = count;
    }
    $(id).attr("rows", rows);
}

var frameLoaded = function (e)
{
    var t = this;
    var type = event.type;
    var e = event.srcElement;
    logW("iframe event type: " + type);
};

var popupPosition = function ()
{
    if (OptionItemValues.EnablePopupDialog)
    {
        var divContainer = getElement(ElementIds.WebPagePopupDiv).css("top", window.scrollY);
        divContainer.css("display", "block");
    }
}

function showPopupDialogForTranslation(sourceText, mainMeaning, moreMeaning)
{
    logD("[X]=" + MousePosition.x + " [Y]=" + MousePosition.y);

    var divContainer = getElement(ElementIds.WebPagePopupDiv);
    if (divContainer == null || divContainer.length == 0)
    {
        var styles = "left: " + (MousePosition.x - 10) + "px; top: " + (MousePosition.y + 10) + "px;";
        //var html =  getFileContentsSync(ProductURIs.WebpagePopup);
        var html = "<div id='btnLanguageTranslatorCollapse' class='collapselink' title='Collapse/Expand Me!' href='javascript:void(0);'></div>"
                 + "<div id='btnLanguageTranslatorDisable' class='disablelink' title='Enable/Disable Translation!' href='javascript:void(0);'></div>"
                 + "<div id='btnLanguageTranslatorClose' class='closelink' title='Close Me! Translation by reloading page!' href='javascript:void(0);'></div>"
                 + "<iframe id='" + ElementIds.PopupIFrame + "' width='326px' height='450px' style='border: 0px;' src='" + ProductURIs.PopupIFramePage + "'></iframe>";
        divContainer = createElement("div");
        divContainer.setAttribute("id", ElementIds.WebPagePopupDiv);
        divContainer.setAttribute("class", "content_translator");
        //divContainer.setAttribute("style", styles);
        divContainer.innerHTML = html;
        
        appendChild(divContainer);

        getElement(ElementIds.PopupIFrame).bind("load", frameLoaded);
        getElement(ElementIds.PopupIFrame).bind("loadeddata", frameLoaded);
        getElement(ElementIds.PopupIFrame).bind("loadedmetadata", frameLoaded);

        divContainer = getElement(ElementIds.WebPagePopupDiv);
    }
    else
    {
        divContainer.html(html);
        showPopup(ElementIds.WebPagePopupDiv);
        //divContainer.show();
        //divContainer.popover('show');
        if (!isTranslatedByInput)
        {
            //divContainer.css("left", MousePosition.x);
            //divContainer.css("top", MousePosition.y + 10);
        }
    }
    divContainer.css("width", getElement(ElementIds.PopupIFrame).css("width"));
    divContainer.removeClass("content_translator_circle");

    var expandLink = getElement(ElementIds.PopupButtonCollapse);
    // enabled & expanded webpage-based popup dialog by default
    expandLink.removeClass("expandlink");
    expandLink.addClass("collapselink");
    expandLink.removeClass("expandcollapsecircle");
    expandLink.addClass("expandcollapserectangle");
    
    var disableLink = getElement(ElementIds.PopupButtonDisable);
    disableLink.removeClass("enablelink");
    disableLink.addClass("disablelink");
    disableLink.removeClass("disableenablecircle");
    disableLink.addClass("disableenablerectangle");    

    var closeLink = getElement(ElementIds.PopupButtonClose);
    closeLink.removeClass("closecircle");
    closeLink.addClass("closerectangle");

    var iframe = getElement(ElementIds.PopupIFrame);
    iframe.css("display", "block");
    
    popupPosition();

    // udpate meanings
    //$("#txtSelected").html(sourceText);
    //$("#txtTranslated").html(mainMeaning);
    //$("#txtTranslatedAll").html(moreMeaning);
    //updateHeight("#txtSelected");
    //updateHeight("#txtTranslated");
    //updateHeight("#txtTranslatedAll");

    attachEvetns();
}

var eventAttached = false;
function attachEvetns()
{
    if (!eventAttached)
    {
        eventAttached = true;
        
        var div = getElement(ElementIds.WebPagePopupDiv);
        var collpase = getElement(ElementIds.PopupButtonCollapse);
        var disable = getElement(ElementIds.PopupButtonDisable);
        var close = getElement(ElementIds.PopupButtonClose);
        var frame = getElement(ElementIds.PopupIFrame);
        var display = frame.css("display");
        var shouldDisplay = function ()
        {
            display = frame.css("display");
            return (display == "none");
        };

        var collapseIFrame = function ()
        {
            collpase.removeClass("collapselink");
            collpase.removeClass("expandlink");
            collpase.removeClass("expandcollapserectangle");
            collpase.removeClass("expandcollapsecircle");

            disable.removeClass("enablelink");
            disable.removeClass("disablelink");
            disable.removeClass("disableenablecircle");
            disable.removeClass("disableenablerectangle");

            close.removeClass("closerectangle");
            close.removeClass("closecircle");
            
            if (shouldDisplay())
            {
                frame.css("display", "block");
                div.removeClass("content_translator_circle");
                div.css("width", "326px");

                collpase.addClass("collapselink");
                collpase.addClass("expandcollapserectangle");

                disable.addClass("disableenablerectangle");

                close.addClass("closerectangle");
            }
            else
            {
                frame.css("display", "none");
                div.addClass("content_translator_circle");
                div.css("width", "48px");

                collpase.addClass("expandlink");
                collpase.addClass("expandcollapsecircle");

                disable.addClass("disableenablecircle");

                close.addClass("closecircle");
            }
            
            if (OptionItemValues.EnableTranslation)
            {
                disable.addClass("disablelink");
            }
            else
            {
                disable.addClass("enablelink");
            }
        };

        collpase.click(function ()
        {
            OptionItemValues.EnablePopupDialog = shouldDisplay();
            if (shouldDisplay()) 
            {
                OptionItemValues.EnableTranslation = OptionItemValues.EnablePopupDialog;  // if open dialog, then enable translation   
            }
            window.setTimeout(collapseIFrame, 100);
        });

        disable.click(function ()
        {
            OptionItemValues.EnableTranslation = !OptionItemValues.EnableTranslation;
            OptionItemValues.EnablePopupDialog = OptionItemValues.EnableTranslation;

            var disableThisPopup = function ()
            {
                collapseIFrame();
            }
            window.setTimeout(disableThisPopup, 100);
        });

        close.click(function ()
        {
            // don't translate text any more unless reloading the webpage
            OptionItemValues.EnablePopupDialog = false;
            OptionItemValues.EnableTranslation = false;

            var hideThisPopup = function ()
            {
                hidePopup(ElementIds.WebPagePopupDiv);
            }
            window.setTimeout(hideThisPopup, 100);
        });

        div.click(function(e){
           logD("clicked div");
           e.bubbles = false;
        });
    }
}

/*------- Send message --------*/
// Content Script => Extension page
function tab2ext(type, message) 
{
	if (!isDefined(message))
	{
		logW("Undefined object: message");
		return;
	}

	logD("tab2ext: function INVOKED with message: " + message);

	if (isValidText(message)) {
		logD("tab2ext: message is NOT null or empty");

		// save text to local storage
		setItem(type, message);

        // send out message
		chrome.runtime.sendMessage(ExtenionUID, {type: type, message: message}, resp_tab);
	} else {
		logW("tab2ext: message is null or empty");
	}
}
// response callback
function resp_tab(response)
{
	if (isDefined(response))
	{
		logW("#RESPONSE#: RECEIVED type: 【" + response.type + "】, message:【" + response.message + "】");
	}
}
/*END*/


/*------- Receive message --------*/
// Register runtime.onMessage event listener to receive message from Extension
if (typeof(chrome) != "undefined")
{
    chrome.runtime.onMessage.addListener(function (request, sender, sendResponse) { rcvmsg_cs(request, sender, sendResponse); });
}

function rcvmsg_cs(request, sender, sendResponse) 
{
	var msg = (sender.tab ?
                "in content script, sent from tab URL:-- [" + sender.tab.url + "]" :
                "in extension script");
	logD("rcvmsg_cs: Received type: " + request.type + ", message [" + request.message + "] " + msg);
	
	var send = (typeof(sendResponse) == "function");
	if (!send)
	{
		logW("rcvmsg_cs: NOT defined the response function!");
	}
	else
	{
		var type = request.type;
		var message = request.message;

		if (!isValidText(type))
		{
			logW("rcvmsg_cs: Message received is null or empty");
		}
		else if (type == OperatorType.getSelectText)
		{
			var text = getSelectedText().toString();
			if (isValidText(text))
			{
				logD("rcvmsg_cs: replied text [" + text + "] by response function...");
				sendResponse({type: type, message: text});
			}
		}
		// else if (type == OperatorType.viewWikipages)
		// {
		// 	logW("rcvmsg_cs: to open wiki page");
			
		    /*  ERROR IN CONTENT SCRIPTS
		    chrome.tabs is not available: 
		    You do not have permission to access this API.
		    Ensure that the required permission or manifest property is included in your manifest.json.
		    */
		    // chrome.tabs.create({ url: url });

		    // otherwise send message to background
		    //tab2ext(OperatorType.viewWikipages, message);

		// }
		// else if (type == OperatorType.viewHomepage)
		// {
		// 	logW("rcvmsg_cs: to open home page");
		// }
		else
		{
			logE("rcvmsg_cs: feature NOT IMPLEMENTED type: " + type);
			// other features
			sendResponse({type: type, message: "rcvmsg_cs: [#NOT FEATURED#]"});
		}
	}
}
/*END*/


/*------- Get selection --------*/
// get selected text from web page user opened
function getSelectedText()
{
    var text = getWindowSelection(window);
    if (!isValidText(text))
    {
    	// try getting selection from iframes
    	var iframes = window.document.getElementsByTagName("iframe");
    	var count = iframes.length;
    	if (iframes && count > 0)
    	{
    		logD("Try to get selection from iframes");
    		for (var i = 0; i < count; i++) {
    			text = getWindowSelection(iframes[i].window);
    			if (isValidText(text))
    			{
	    			text = getWindowSelection(iframes[i].contentWindow);
	    			if (isValidText(text))
	    			{
	    				break;
	    			}
    			}
    		};
    	}
    }
    return text.toString();
}
// get selected text from window or document
function getWindowSelection(win)
{
    var text = "";
    if (!isDefined(win)) { return text; }    
    
    var doc = win.document;
    var focused = doc.activeElement;
    if (focused)
    {
        try
        {
            if (focused.tagName == 'SELECT')
            {
                return text;
            }
            logW("1#element: " + focused.tagName);
            text = focused.value.substring(focused.selectionStart, focused.selectionEnd);
        }
        catch (err)
        {
        }
    }

    if (!isValidText(text) && win.getSelection) 
	{
		logW("2#window");
        text = "" + win.getSelection().toString();
    }

    if (!isValidText(text) && doc.getSelection) 
	{
		logW("3#document");
        text = "" + doc.getSelection().toString();
    }

	if (!isValidText(text) && doc.selection) 
	{
		logW("4#range");
        text = "" + doc.selection.createRange().text;
    }

    return text.toString();
}
/*END*/


/*------- scripts executed after page is loaded --------*/
function handlePages()
{
    showPopupMsg("check for setting wiki pages...");
	// following data are set by chrome.tabs.executeScript() in wikipages.js
	var source = getItem(OperatorType.setBaikeType);
    var type = getItem(OperatorType.setPageControl);
    var value = getItem(OperatorType.copySelectText);
    var isTyped = isValidText(type);
    showPopupMsg(isDefined(source) ? source : "source undefined");
	
	// tencent soso baike
	if (isDefined(source) && source == BaikeType.tencent)
	{
		setPage_TencentAPI(isTyped, value);
	}
	if (isDefined(source) && source == BaikeType.baidu)
	{
		setPage_BaiduAPI(isTyped, value);
	}

    // clear data
    removeItem(OperatorType.setBaikeType);
    removeItem(OperatorType.copySelectText);
    removeItem(OperatorType.setPageControl);
}
/*END*/



// Unlike the other chrome.* APIs, parts of chrome.runtime can be used by content scripts

// send message to notify the background page
// when content script page loaded
// tab2ext(OperatorType.showPageAction, OperatorType.showPageAction);
